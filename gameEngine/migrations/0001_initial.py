# Generated by Django 5.2.6 on 2025-10-30 08:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("icon", models.CharField(max_length=10)),
                ("description", models.TextField()),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("achievement", "Achievement"),
                            ("milestone", "Milestone"),
                            ("special", "Special"),
                            ("seasonal", "Seasonal"),
                        ],
                        default="achievement",
                        max_length=20,
                    ),
                ),
                ("requirement_type", models.CharField(max_length=50)),
                ("requirement_value", models.IntegerField()),
                ("reward_xp", models.IntegerField(default=0)),
                ("reward_tickets", models.IntegerField(default=0)),
                ("reward_coins", models.IntegerField(default=0)),
                ("reward_stars", models.IntegerField(default=0)),
                ("is_secret", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "badges",
                "ordering": ["rarity", "name"],
            },
        ),
        migrations.CreateModel(
            name="MazeSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("timeout", "Timed Out"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("current_position", models.JSONField(default=dict)),
                ("moves_made", models.IntegerField(default=0)),
                ("patterns_found", models.IntegerField(default=0)),
                ("time_elapsed", models.IntegerField(default=0)),
                ("maze_configuration", models.JSONField(default=dict)),
                ("discovered_patterns", models.JSONField(default=list)),
                ("used_hints", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "maze_sessions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="PlayerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hedera_account_id",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "hedera_recipient_id",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                ("hedera_public_key", models.TextField(blank=True, null=True)),
                ("tickets", models.IntegerField(default=5)),
                ("total_equity", models.FloatField(default=0.0)),
                ("xp", models.IntegerField(default=0)),
                ("level", models.IntegerField(default=1)),
                ("total_ventures_joined", models.IntegerField(default=0)),
                ("total_ventures_won", models.IntegerField(default=0)),
                ("total_equity_earned", models.FloatField(default=0.0)),
                ("stars", models.IntegerField(default=100)),
                ("coins", models.IntegerField(default=1000)),
                ("is_ceo", models.BooleanField(default=False)),
                ("total_ceo_wins", models.IntegerField(default=0)),
                ("avatar", models.CharField(default="ðŸš€", max_length=10)),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("dark", "Dark Theme"),
                            ("light", "Light Theme"),
                            ("nebula", "Nebula Theme"),
                        ],
                        default="dark",
                        max_length=20,
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "twitter_handle",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("newsletter_subscribed", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_active", models.DateTimeField(auto_now=True)),
                ("streak_days", models.IntegerField(default=0)),
                ("last_login_streak", models.DateField(blank=True, null=True)),
                (
                    "current_maze_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="active_player",
                        to="gameEngine.mazesession",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playerprofile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Player Profile",
                "verbose_name_plural": "Player Profiles",
                "db_table": "player_profiles",
                "ordering": ["-total_equity", "-level"],
            },
        ),
        migrations.AddField(
            model_name="mazesession",
            name="player",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="maze_sessions",
                to="gameEngine.playerprofile",
            ),
        ),
        migrations.CreateModel(
            name="Venture",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("venture_type", models.CharField(max_length=50)),
                ("icon", models.CharField(max_length=10)),
                ("description", models.TextField()),
                ("hcs_topic_id", models.CharField(max_length=32)),
                ("token_id", models.CharField(max_length=32)),
                (
                    "nft_collection_id",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                ("total_equity", models.FloatField(default=100.0)),
                ("ceo_equity", models.FloatField(default=20.0)),
                ("participant_equity", models.FloatField(default=80.0)),
                ("entry_ticket_cost", models.IntegerField(default=1)),
                ("max_participants", models.IntegerField(default=100)),
                ("min_level_required", models.IntegerField(default=1)),
                ("maze_complexity", models.IntegerField(default=5)),
                ("maze_time_limit", models.IntegerField(default=3600)),
                ("required_patterns", models.IntegerField(default=5)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active - Accepting Entries"),
                            ("running", "Running - Maze Active"),
                            ("completed", "Completed - CEO Selected"),
                            ("upcoming", "Upcoming"),
                        ],
                        default="upcoming",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("completion_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "winning_player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="won_ventures",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "ventures",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="playerprofile",
            name="ceo_of_venture",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="current_ceo",
                to="gameEngine.venture",
            ),
        ),
        migrations.CreateModel(
            name="NFTBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token_id", models.CharField(max_length=32, unique=True)),
                ("serial_number", models.IntegerField()),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("ceo", "CEO Badge"),
                            ("venture", "Venture Completion"),
                            ("milestone", "Milestone"),
                            ("special", "Special Achievement"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("image_url", models.URLField(blank=True, null=True)),
                ("metadata_url", models.URLField(blank=True, null=True)),
                ("mint_transaction_id", models.CharField(max_length=100)),
                ("associated_account_id", models.CharField(max_length=32)),
                ("minted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nft_badges",
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "venture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.venture",
                    ),
                ),
            ],
            options={
                "db_table": "nft_badges",
                "ordering": ["-minted_at", "rarity"],
            },
        ),
        migrations.AddField(
            model_name="mazesession",
            name="venture",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="maze_sessions",
                to="gameEngine.venture",
            ),
        ),
        migrations.CreateModel(
            name="HederaTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("transaction_id", models.CharField(max_length=100, unique=True)),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("ticket_purchase", "Star Ticket Purchase"),
                            ("venture_entry", "Venture Entry"),
                            ("equity_distribution", "Equity Distribution"),
                            ("nft_mint", "NFT Minting"),
                            ("token_transfer", "Token Transfer"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                ("token_id", models.CharField(blank=True, max_length=32, null=True)),
                ("from_account", models.CharField(max_length=32)),
                ("to_account", models.CharField(max_length=32)),
                ("status", models.CharField(default="completed", max_length=20)),
                ("memo", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "nft_badge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.nftbadge",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "venture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.venture",
                    ),
                ),
            ],
            options={
                "db_table": "hedera_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("venture_join", "Venture Joined"),
                            ("venture_win", "Venture Won"),
                            ("ceo_appointed", "CEO Appointed"),
                            ("nft_earned", "NFT Earned"),
                            ("level_up", "Level Up"),
                        ],
                        max_length=20,
                    ),
                ),
                ("icon", models.CharField(max_length=10)),
                ("description", models.TextField()),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "nft_badge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.nftbadge",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "venture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gameEngine.venture",
                    ),
                ),
            ],
            options={
                "db_table": "activities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PlayerBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("unlocked_at", models.DateTimeField(auto_now_add=True)),
                ("is_equipped", models.BooleanField(default=False)),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_badges",
                        to="gameEngine.badge",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_badges",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "player_badges",
                "ordering": ["-unlocked_at"],
                "unique_together": {("player", "badge")},
            },
        ),
        migrations.CreateModel(
            name="PlayerVenture",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "equity_share",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ]
                    ),
                ),
                (
                    "initial_investment",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "current_value",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("is_winner", models.BooleanField(default=False)),
                ("rank", models.IntegerField(blank=True, null=True)),
                ("performance_score", models.FloatField(default=0.0)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_ventures",
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "venture",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_venture_relations",
                        to="gameEngine.venture",
                    ),
                ),
            ],
            options={
                "db_table": "player_ventures",
                "ordering": ["-joined_at"],
                "unique_together": {("player", "venture")},
            },
        ),
        migrations.CreateModel(
            name="VentureParticipation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("entry_tickets_used", models.IntegerField(default=1)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("equity_earned", models.FloatField(default=0.0)),
                ("completed_maze", models.BooleanField(default=False)),
                ("completion_time", models.IntegerField(blank=True, null=True)),
                ("rank", models.IntegerField(blank=True, null=True)),
                (
                    "entry_transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "equity_transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="venture_participations",
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "venture",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="gameEngine.venture",
                    ),
                ),
            ],
            options={
                "db_table": "venture_participations",
                "ordering": ["joined_at"],
                "unique_together": {("player", "venture")},
            },
        ),
    ]
