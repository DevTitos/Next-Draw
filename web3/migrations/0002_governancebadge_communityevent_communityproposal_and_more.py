# Generated by Django 5.2.6 on 2025-10-29 17:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            "gameEngine",
            "0002_remove_venture_success_rate_alter_playerbadge_badge_and_more",
        ),
        ("web3", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GovernanceBadge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("icon", models.CharField(max_length=10)),
                ("description", models.TextField()),
                ("requirement_type", models.CharField(max_length=50)),
                ("requirement_value", models.IntegerField()),
                ("reward_xp", models.IntegerField(default=100)),
                ("reward_tickets", models.IntegerField(default=5)),
                ("reward_stars", models.IntegerField(default=25)),
            ],
            options={
                "db_table": "governance_badges",
            },
        ),
        migrations.CreateModel(
            name="CommunityEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("town_hall", "Town Hall"),
                            ("proposal_review", "Proposal Review"),
                            ("governance_update", "Governance Update"),
                            ("community_vote", "Community Vote"),
                        ],
                        max_length=20,
                    ),
                ),
                ("scheduled_for", models.DateTimeField()),
                ("duration_minutes", models.IntegerField(default=60)),
                ("max_participants", models.IntegerField(default=100)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosted_events",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "community_events",
                "ordering": ["scheduled_for"],
            },
        ),
        migrations.CreateModel(
            name="CommunityProposal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "proposal_type",
                    models.CharField(
                        choices=[
                            ("feature", "New Feature"),
                            ("venture", "New Venture"),
                            ("governance", "Governance Change"),
                            ("funding", "Funding Allocation"),
                            ("partnership", "Partnership"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("voting_start", models.DateTimeField(blank=True, null=True)),
                ("voting_end", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active Voting"),
                            ("passed", "Passed"),
                            ("rejected", "Rejected"),
                            ("implemented", "Implemented"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("required_approval", models.FloatField(default=51.0)),
                ("total_votes", models.IntegerField(default=0)),
                ("yes_votes", models.IntegerField(default=0)),
                ("no_votes", models.IntegerField(default=0)),
                ("abstain_votes", models.IntegerField(default=0)),
                ("implementation_notes", models.TextField(blank=True, null=True)),
                ("implemented_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals_created",
                        to="gameEngine.playerprofile",
                    ),
                ),
                (
                    "implemented_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "community_proposals",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PlayerGovernanceStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("proposals_created", models.IntegerField(default=0)),
                ("votes_cast", models.IntegerField(default=0)),
                ("events_attended", models.IntegerField(default=0)),
                ("successful_proposals", models.IntegerField(default=0)),
                ("total_voting_power", models.FloatField(default=0.0)),
                ("governance_level", models.IntegerField(default=1)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                (
                    "player",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gov_stats",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "player_governance_stats",
            },
        ),
        migrations.CreateModel(
            name="EventParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("contribution_xp", models.IntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="web3.communityevent",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events_attended",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "event_participants",
                "unique_together": {("event", "player")},
            },
        ),
        migrations.CreateModel(
            name="ProposalVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vote",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("abstain", "Abstain")],
                        max_length=10,
                    ),
                ),
                ("voted_at", models.DateTimeField(auto_now_add=True)),
                ("voting_power", models.FloatField(default=1.0)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="web3.communityproposal",
                    ),
                ),
                (
                    "voter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes_cast",
                        to="gameEngine.playerprofile",
                    ),
                ),
            ],
            options={
                "db_table": "proposal_votes",
                "unique_together": {("proposal", "voter")},
            },
        ),
    ]
